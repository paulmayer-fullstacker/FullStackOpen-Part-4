// tests/bloglist_api.test.js:
// Import the main application and test utilities
const supertest = require('supertest')

// Import 'test', 'describe', 'afterAll', 'beforeAll' from Node's built-in test runner
// const { test, describe, afterAll, beforeAll } = require('node:test') // Not Working

const { test, describe } = require('node:test')
// Use the hooks directly without destructuring:
const beforeAll = require('node:test').before
const afterAll = require('node:test').after

// Import Node's built-in assertion library
const assert = require('node:assert')

const app = require('../app')
const helper = require('./test_helper')
// const Blog = require('../models/blog')  // Not Used Here

// Import the new MongoDB Memory Server database helpers
// NOTE: Make sure you have created the file ./test_helper_db.js
const { connectToMemoryServer, closeMemoryServer } = require('./mongodb-memory-server-helper')

// --- Setup and Teardown Hooks ---

// Runs once before ALL tests in this suite
beforeAll(async () => {
  // Connect Mongoose to the in-memory database
  await connectToMemoryServer()
  // Clear out any potential old data and initialize the database
  await helper.listOfTestBlogs()
})

// Runs once after ALL tests in this suite are finished
afterAll(async () => {
  // Closes Mongoose connection and stops the in-memory MongoDB server
  await closeMemoryServer()
})

// --- API Test Suite ---

describe('API Test Suite', () => {
  // Test: blogs are returned as json
  test('blogs are returned as json', async () => {
    await supertest(app)
      .get('/api/blogs')
      // assert the status code
      .expect(200)
      // assert the content type
      .expect('Content-Type', /application\/json/) 
  }, 10000)

  // Test: all blogs are returned
  test('all blogs are returned', async () => {
    const response = await supertest(app).get('/api/blogs')
    // Assert that the length of the response body is correct
    assert.strictEqual(response.body.length, helper.initialBlogs.length)
  }, 10000)

  // Test: returned blogs have "id" property rather than "_id" property
  test('returned blogs have "id" property rather than "_id" property', async () => {
    const response = await supertest(app).get('/api/blogs')
    // Check that every blog object has an 'id' property and not an '_id' property
    response.body.forEach(blog => {
      // Check that 'id' is defined (assert.ok checks for truthiness/existence)
      assert.ok(blog.id, 'Blog must have an id property')
      // Check that '_id' is undefined
      assert.strictEqual(blog._id, undefined, 'Blog must not have an _id property') 
    })
  }, 10000)

  // Test: a valid blog can be added
  test('a valid blog can be added', async () => {
    const newBlog = helper.additionalTestBlog

    await supertest(app)
      .post('/api/blogs')
      .send(newBlog)
      .expect(201)
      .expect('Content-Type', /application\/json/)

    // Verify that the blog was actually added to the database
    const blogsAtEnd = await helper.blogsInDb()
    assert.strictEqual(blogsAtEnd.length, helper.listOfTestBlogs.length + 1)
    // Verify the title is present using assert.notStrictEqual with find
    const titles = blogsAtEnd.map(b => b.title)
    // assert.ok checks that the title is present (returns truthy)
    assert.ok(titles.includes('Additional Test Blog No 1'), 'The new blog title should be present in the database') 
  }, 10000)
  // Add your remaining API tests here...
})